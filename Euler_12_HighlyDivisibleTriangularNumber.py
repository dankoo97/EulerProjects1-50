# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
# The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred divisors?

from primes import find_primes_less_than

tri_nums = [0, 1]  # 0 is a placeholder, the index is the nth triangle number


def num_factors(x):
    if x == 1:
        return 1

    primes = find_primes_less_than(int(x ** 0.5))  # No primes would be a factor above the sqrt
    prime_powers = [0] * len(primes)

    for prime_index in range(len(primes)):
        while x % (primes[prime_index] ** (prime_powers[prime_index] + 1)) == 0:  # This counts the number of distinct primes and their exponent
            prime_powers[prime_index] += 1

    factors = 1

    for prime in range(len(primes)):        # Factors can be counted using these numbers, ex: 28 -> 1, 2, 4, 7, 14, 28, where 28 == 2^2 * 7^1
        factors *= prime_powers[prime] + 1  # We then take each exponent, add 1 to each and multiply them together. ex: (2 + 1) * (1 + 1) == 6

    return factors


while num_factors(tri_nums[-1]) < 500:
    tri_nums.append(tri_nums[-1] + len(tri_nums))

print(tri_nums[-1])  # 76576500, takes a minute
